from django.db import models
from django.conf import settings
from django.utils import timezone
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from users.models import User
from rest_framework import serializers

class Task(models.Model):
    STATUS_CHOICES = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç'),
        ('in_progress', '–í —Ä–∞–±–æ—Ç–µ'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'),
    ]
    
    title = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    assigned_to = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name="–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_tasks')
    due_date = models.DateTimeField(verbose_name="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    status = models.CharField(
        max_length=20, 
        choices=STATUS_CHOICES, 
        default='pending', verbose_name="–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"
    )
    created_at = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    
    def __str__(self):
        return self.title
    
    @property
    def is_overdue(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞"""
        return timezone.now() > self.due_date and self.status != 'completed'
    
    def save(self, *args, **kwargs):
        is_new = self._state.adding
        
        super().save(*args, **kwargs)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.send_websocket_notification(is_new)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)
        if is_new:
            self.send_assignment_notification()
    
    def send_websocket_notification(self, is_new):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            channel_layer = get_channel_layer()
            
            task_data = {
                'id': self.id,
                'title': self.title,
                'status': self.status,
                'is_overdue': self.is_overdue,
            }
            
            if is_new:
                # –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
                async_to_sync(channel_layer.group_send)(
                    f'user_{self.assigned_to.id}',
                    {
                        'type': 'task_created',
                        'task': task_data
                    }
                )
            else:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                async_to_sync(channel_layer.group_send)(
                    f'user_{self.assigned_to.id}',
                    {
                        'type': 'task_update', 
                        'task': task_data
                    }
                )
        except Exception as e:
            print(f"WebSocket error: {e}")
    
    def send_assignment_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –°–ò–ù–•–†–û–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è"""
        from bot.utils import send_telegram_message_sync
    
        if self.assigned_to.telegram_chat_id:
            message = f"üéØ <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞!</b>\n\n{self.title}\nüìÖ –î–æ: {self.due_date.strftime('%d.%m.%Y %H:%M')}"
            send_telegram_message_sync(self.assigned_to.telegram_chat_id, message)
    
    class Meta:
        verbose_name = '–ó–∞–¥–∞—á–∞'
        verbose_name_plural = '–ó–∞–¥–∞—á–∏'
        ordering = ['-created_at']