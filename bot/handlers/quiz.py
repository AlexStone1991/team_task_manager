from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random

router = Router()

class QuizState(StatesGroup):
    waiting_answer = State()

quiz_questions = [
    {
        "question": "–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
        "options": ["–ú–æ—Å–∫–≤–∞", "–ü–∏—Ç–µ—Ä", "–ö–∞–∑–∞–Ω—å", "–°–æ—á–∏"],
        "answer": "–ú–æ—Å–∫–≤–∞"
    },
    {
        "question": "2 + 2 √ó 2 = ?", 
        "options": ["6", "8", "4", "10"],
        "answer": "6"
    },
    {
        "question": "–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ–∫–µ–∞–Ω?",
        "options": ["–¢–∏—Ö–∏–π", "–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π"],
        "answer": "–¢–∏—Ö–∏–π"
    }
]

user_scores = {}

@router.message(Command("quiz"))
async def start_quiz(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    question = random.choice(quiz_questions)
    
    keyboard = []
    for option in question["options"]:
        keyboard.append([types.KeyboardButton(text=option)])
    
    await message.answer(
        f"üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞!</b>\n\n{question['question']}",
        reply_markup=types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True),
        parse_mode='HTML'
    )
    
    await state.set_state(QuizState.waiting_answer)
    await state.update_data(current_question=question)

@router.message(QuizState.waiting_answer)
async def check_answer(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    data = await state.get_data()
    question = data["current_question"]
    
    if message.text == question["answer"]:
        user_id = message.from_user.id
        user_scores[user_id] = user_scores.get(user_id, 0) + 1
        await message.answer("‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ", parse_mode='HTML')
    else:
        await message.answer(f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}", parse_mode='HTML')
    
    await state.clear()
    
    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ
    keyboard = [[types.KeyboardButton(text="üéÆ –ï—â–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")], [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]]
    await message.answer(
        f"üéØ –°—ã–≥—Ä–∞–µ–º –µ—â–µ? –¢–≤–æ–π —Å—á–µ—Ç: {user_scores.get(message.from_user.id, 0)}",
        reply_markup=types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )

# –î–û–ë–ê–í–¨ –≠–¢–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_quiz(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    await state.clear()
    
    from bot.handlers.start import show_main_menu
    await show_main_menu(message)

@router.message(F.text == "üéÆ –ï—â–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
async def another_quiz(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –µ—â–µ –æ–¥–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    await start_quiz(message, state)