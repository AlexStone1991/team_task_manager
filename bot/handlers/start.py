from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from bot.states import UserStates

User = get_user_model()
router = Router()

@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    telegram_username = message.from_user.username
    
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î Django
        user = await sync_to_async(User.objects.get)(telegram_username=telegram_username)
        user.telegram_chat_id = message.chat.id
        await sync_to_async(user.save)()
        
        # –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –†–ï–ñ–ò–ú
        await state.set_state(UserStates.main_menu)
        await message.answer(
            "‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            parse_mode='HTML'
        )
        await show_main_menu(message)
        
    except User.DoesNotExist:
        # –ì–û–°–¢–ï–í–û–ô –†–ï–ñ–ò–ú
        await state.set_state(UserStates.guest_mode)
        await message.answer(
            "üëã <b>–ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º</b>\n\n"
            "üéÆ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –í—Å–µ –∏–≥—Ä—ã (–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞, –≤–∏—Å–µ–ª–∏—Ü–∞, –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏)\n"
            "‚Ä¢ –ú—É–∑—ã–∫–∞, –ø–æ–≥–æ–¥–∞, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
            "‚Ä¢ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üîí <b>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "üí° <b>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ: http://127.0.0.1:8000/",
            parse_mode='HTML'
        )
        await show_guest_menu(message)

async def show_main_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = [
        [types.KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç")],
        [types.KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
        [types.KeyboardButton(text="üéÆ –†–µ–∂–∏–º –∏–≥—Ä—ã"), types.KeyboardButton(text="ü§ñ –†–µ–∂–∏–º AI")],
        [types.KeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞"), types.KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞")], 
        [types.KeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"), types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [types.KeyboardButton(text="üíµ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"), types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        
    ]
    
    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º..."
    )
    
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def show_guest_menu(message: types.Message):
    """–ú–µ–Ω—é –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    keyboard = [
        [types.KeyboardButton(text="üéÆ –†–µ–∂–∏–º –∏–≥—Ä—ã")],
        [types.KeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞"), types.KeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞")],
        [types.KeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"), types.KeyboardButton(text="üíµ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")],
        [types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), types.KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç")]
    ]
    
    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é..."
    )
    
    await message.answer(
        "üëã <b>–ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )