import requests
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from django.conf import settings
from bot.states import UserStates

router = Router()

# ==================== –ö–û–ú–ê–ù–î–ê /ask ====================
@router.message(Command("ask"))
async def ask_ai_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask"""
    question = message.text.replace('/ask', '').strip()
    
    if not question:
        await message.answer("‚ùå –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n<code>/ask —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å</code>", parse_mode='HTML')
        return
    
    await process_ai_question(message, question)

# ==================== –†–ï–ñ–ò–ú AI ====================
@router.message(StateFilter(UserStates.main_menu), F.text == "ü§ñ –†–µ–∂–∏–º AI")
async def enter_ai_mode(message: types.Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º AI —á–∞—Ç–∞"""
    await state.set_state(UserStates.ai_chat)
    
    keyboard = [
        [types.KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ AI")]
    ]
    
    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )
    
    await message.answer(
        "üß† <b>–†–µ–∂–∏–º AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å—ã - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

@router.message(StateFilter(UserStates.ai_chat), F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ AI")
async def exit_ai_mode(message: types.Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ AI"""
    from bot.handlers.start import show_main_menu
    await state.set_state(UserStates.main_menu)
    await show_main_menu(message)

@router.message(StateFilter(UserStates.ai_chat), F.text & ~F.text.startswith('/'))
async def handle_ai_chat(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ AI"""
    question = message.text
    await process_ai_question(message, question)

# ==================== –£–ú–ù–´–ô –û–ü–†–û–° ====================
@router.message(StateFilter(UserStates.main_menu), F.text & ~F.text.startswith('/'))
async def handle_any_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –õ–Æ–ë–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)"""
    
    # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    all_menu_buttons = [
        "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üéÆ –†–µ–∂–∏–º –∏–≥—Ä—ã", "ü§ñ –†–µ–∂–∏–º AI", "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
        "üéµ –ú—É–∑—ã–∫–∞", "üå§Ô∏è –ü–æ–≥–æ–¥–∞", "üíµ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"  # ‚Üê –í–°–ï –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    ]
    if message.text in all_menu_buttons:
        return  # ‚Üê –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –í–°–ï –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(message.text) < 8:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    question_indicators = ['?', '—á—Ç–æ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∑–∞—á–µ–º', '–ª–∏', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏']
    is_question = any(indicator in message.text.lower() for indicator in question_indicators)
    
    if is_question:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç –æ—Ç AI
        keyboard = [
            [
                types.InlineKeyboardButton(text="ü§ñ –î–∞, —Å–ø—Ä–æ—Å–∏—Ç—å AI", callback_data=f"ask_ai_{message.message_id}"),
                types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_ai")
            ]
        ]
        
        await message.answer(
            f"üí≠ –ü–æ—Ö–æ–∂–µ, —Ç—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n"
            f"¬´{message.text}¬ª\n\n"
            f"–•–æ—á–µ—à—å —á—Ç–æ–±—ã AI –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –Ω–µ–≥–æ?",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@router.callback_query(F.data.startswith("ask_ai_"))
async def process_ai_request(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AI —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    message_id = callback.data.split("_")[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    original_message = callback.message.reply_to_message
    if not original_message:
        await callback.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    question = original_message.text
    await process_ai_question(callback.message, question, callback)

@router.callback_query(F.data == "cancel_ai")
async def cancel_ai_request(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI"""
    await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –∫ AI –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.answer()

# ==================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê AI ====================
async def process_ai_question(message_or_callback, question, callback=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if hasattr(message_or_callback, 'answer'):
        processing_msg = await message_or_callback.answer("üîÑ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    else:
        processing_msg = await message_or_callback.answer("üîÑ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        if not settings.MISTRAL_API_KEY:
            await processing_msg.delete()
            await message_or_callback.answer("‚ùå API –∫–ª—é—á Mistral –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral AI
        response = requests.post(
            'https://api.mistral.ai/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {settings.MISTRAL_API_KEY}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'mistral-small-latest',
                'messages': [
                    {
                        'role': 'user', 
                        'content': question
                    }
                ],
                'temperature': 0.7,
                'max_tokens': 1000
            },
            timeout=30
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
        await processing_msg.delete()
        
        if response.status_code == 200:
            data = response.json()
            answer = data['choices'][0]['message']['content']
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
            if len(answer) > 4000:
                parts = [answer[i:i+4000] for i in range(0, len(answer), 4000)]
                for part in parts:
                    await message_or_callback.answer(f"ü§ñ {part}")
            else:
                await message_or_callback.answer(f"ü§ñ {answer}")
                
            # –ï—Å–ª–∏ —ç—Ç–æ callback, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            if callback:
                await callback.message.edit_reply_markup(reply_markup=None)
                
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}\n"
            if response.status_code == 401:
                error_msg += "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Mistral"
            elif response.status_code == 429:
                error_msg += "–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω"
            else:
                error_msg += response.text[:500]
                
            await message_or_callback.answer(error_msg)
            
    except requests.exceptions.Timeout:
        await processing_msg.delete()
        await message_or_callback.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI")
    except Exception as e:
        await processing_msg.delete()
        await message_or_callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    if callback:
        await callback.answer()