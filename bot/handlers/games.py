from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from bot.states import UserStates
import random

router = Router()
ROCK = "–ö–∞–º–µ–Ω—å"
SCISSORS = "–ù–æ–∂–Ω–∏—Ü—ã"
PAPER = "–ë—É–º–∞–≥–∞"

@router.message(F.text == "üéÆ –†–µ–∂–∏–º –∏–≥—Ä—ã")
async def enter_game_mode(message: types.Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∏–≥—Ä—ã"""
    await state.set_state(UserStates.game_mode)
    
    keyboard = [
        [types.KeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å")],
        [types.KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")]
    ]
    
    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )
    
    await message.answer(
        "üéØ <b>–ò–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "–ù–∞–∂–º–∏ 'üéÆ –ò–≥—Ä–∞—Ç—å' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

@router.message(StateFilter(UserStates.game_mode), F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
async def exit_game_mode(message: types.Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    from bot.handlers.start import show_main_menu
    await state.set_state(UserStates.main_menu)
    await show_main_menu(message)

@router.message(StateFilter(UserStates.game_mode), F.text == "üéÆ –ò–≥—Ä–∞—Ç—å")
async def game_in_mode(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∏–≥—Ä–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    await game_command(message)

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–≥—Ä—ã –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.message(Command("game"))
async def game_command(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞"""

    keyboard = [
        [types.InlineKeyboardButton(text="‚úä –ö–∞–º–µ–Ω—å", callback_data=ROCK)],
        [types.InlineKeyboardButton(text="‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data=SCISSORS)],
        [types.InlineKeyboardButton(text="‚úã –ë—É–º–∞–≥–∞", callback_data=PAPER)]
    ]
    
    await message.answer(
        "üéÆ <b>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞!</b>\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data.in_([ROCK, SCISSORS, PAPER]))
async def process_game(callback: types.CallbackQuery):
    user_choice = callback.data
    bot_choice = random.choice([ROCK, SCISSORS, PAPER])
    
    choices = {ROCK: "‚úä", SCISSORS: "‚úåÔ∏è", PAPER: "‚úã"}
    
    if user_choice == bot_choice:
        result = "ü§ù <b>–ù–∏—á—å—è!</b>"
    elif (user_choice == ROCK and bot_choice == SCISSORS) or \
         (user_choice == SCISSORS and bot_choice == PAPER) or \
         (user_choice == PAPER and bot_choice == ROCK):
        result = "üéâ <b>–¢—ã –≤—ã–∏–≥—Ä–∞–ª!</b>"
    else:
        result = "üòé <b>–Ø –≤—ã–∏–≥—Ä–∞–ª!</b>"
    
    await callback.message.edit_text(
        f"üéÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:</b>\n\n"
        f"–¢—ã: {choices[user_choice]} {user_choice}\n"
        f"–ë–æ—Ç: {choices[bot_choice]} {bot_choice}\n\n"
        f"{result}\n\n"
        f"–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ? –ù–∞–∂–º–∏ 'üéÆ –ò–≥—Ä–∞—Ç—å'",
        parse_mode='HTML'
    )
    await callback.answer()