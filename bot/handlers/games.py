from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from bot.states import UserStates
import random

router = Router()

# ==================== –ö–ê–ú–ï–ù–¨-–ù–û–ñ–ù–ò–¶–´-–ë–£–ú–ê–ì–ê (—Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥) ====================
ROCK = "–ö–∞–º–µ–Ω—å"
SCISSORS = "–ù–æ–∂–Ω–∏—Ü—ã"
PAPER = "–ë—É–º–∞–≥–∞"

async def show_game_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–≥—Ä"""
    keyboard = [
        [types.KeyboardButton(text="üéÆ –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")],
        [ types.KeyboardButton(text="üé≠ –í–∏—Å–µ–ª–∏—Ü–∞"), types.KeyboardButton(text="‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")],
        [types.KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")]
    ]
    
    await message.answer(
        "üéÆ <b>–ò–ì–†–û–í–û–ô –†–ï–ñ–ò–ú</b>\n\n–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:",
        reply_markup=types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True),
        parse_mode='HTML'
    )

@router.message(StateFilter(UserStates.main_menu), F.text == "üéÆ –†–µ–∂–∏–º –∏–≥—Ä—ã")
async def enter_game_mode(message: types.Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∏–≥—Ä—ã"""
    await state.set_state(UserStates.game_mode)
    await show_game_menu(message)

@router.message(StateFilter(UserStates.game_mode), F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
async def exit_game_mode(message: types.Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    from bot.handlers.start import show_main_menu
    await state.set_state(UserStates.main_menu)
    await show_main_menu(message)

@router.message(StateFilter(UserStates.game_mode), F.text == "üéÆ –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")
async def play_rps_in_mode(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ –∏–∑ –º–µ–Ω—é –∏–≥—Ä"""
    await game_command(message)

@router.message(Command("game"))
async def game_command(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞"""
    keyboard = [
        [types.InlineKeyboardButton(text="‚úä –ö–∞–º–µ–Ω—å", callback_data=ROCK)],
        [types.InlineKeyboardButton(text="‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data=SCISSORS)],
        [types.InlineKeyboardButton(text="‚úã –ë—É–º–∞–≥–∞", callback_data=PAPER)]
    ]
    
    await message.answer(
        "üéÆ <b>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞!</b>\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data.in_([ROCK, SCISSORS, PAPER]))
async def process_game(callback: types.CallbackQuery):
    user_choice = callback.data
    bot_choice = random.choice([ROCK, SCISSORS, PAPER])
    
    choices = {ROCK: "‚úä", SCISSORS: "‚úåÔ∏è", PAPER: "‚úã"}
    
    if user_choice == bot_choice:
        result = "ü§ù <b>–ù–∏—á—å—è!</b>"
    elif (user_choice == ROCK and bot_choice == SCISSORS) or \
         (user_choice == SCISSORS and bot_choice == PAPER) or \
         (user_choice == PAPER and bot_choice == ROCK):
        result = "üéâ <b>–¢—ã –≤—ã–∏–≥—Ä–∞–ª!</b>"
    else:
        result = "üòé <b>–Ø –≤—ã–∏–≥—Ä–∞–ª!</b>"
    
    await callback.message.edit_text(
        f"üéÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:</b>\n\n"
        f"–¢—ã: {choices[user_choice]} {user_choice}\n"
        f"–ë–æ—Ç: {choices[bot_choice]} {bot_choice}\n\n"
        f"{result}\n\n"
        f"–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ? –í–µ—Ä–Ω–∏—Å—å –≤ –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º!",
        parse_mode='HTML'
    )
    await callback.answer()

# ==================== –ö–†–ï–°–¢–ò–ö–ò-–ù–û–õ–ò–ö–ò (–ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ï –ë–ï–ó FSM) ====================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä (–∫–∞–∫ –≤ —Ç–≤–æ–µ–π —Ä–∞–±–æ—á–µ–π –ª–æ–≥–∏–∫–µ)
tic_tac_toe_games = {}

@router.message(StateFilter(UserStates.game_mode), F.text == "‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")
async def start_tic_tac_toe(message: types.Message):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É
    board = [[" " for _ in range(3)] for _ in range(3)]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
    tic_tac_toe_games[user_id] = {
        'board': board,
        'player_turn': True
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_tic_tac_toe_keyboard(board)
    
    await message.answer(
        "‚ùå‚≠ï <b>–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!</b>\n\n"
        "–¢—ã –∏–≥—Ä–∞–µ—à—å –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏ (‚ùå). –í—ã–±–µ—Ä–∏ –∫–ª–µ—Ç–∫—É:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("ttt_"))
async def process_tic_tac_toe_move(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
    user_id = callback.from_user.id
    
    # –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
    if callback.data == "ttt_exit":
        if user_id in tic_tac_toe_games:
            del tic_tac_toe_games[user_id]
        await callback.message.edit_text("üö™ –í—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if user_id not in tic_tac_toe_games:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
        return
    
    game = tic_tac_toe_games[user_id]
    board = game['board']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
    if not game['player_turn']:
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    try:
        row, col = map(int, callback.data.replace("ttt_", "").split("_"))
    except:
        await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
    if board[row][col] != " ":
        await callback.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return
    
    # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    board[row][col] = "X"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞
    if check_win(board, "X"):
        keyboard = create_tic_tac_toe_keyboard(board)
        await callback.message.edit_text(
            "üéâ <b>–¢—ã –≤—ã–∏–≥—Ä–∞–ª! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        del tic_tac_toe_games[user_id]
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–∏
    if is_board_full(board):
        keyboard = create_tic_tac_toe_keyboard(board)
        await callback.message.edit_text(
            "ü§ù <b>–ù–∏—á—å—è! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        del tic_tac_toe_games[user_id]
        await callback.answer()
        return
    
    # –•–æ–¥ –±–æ—Ç–∞
    bot_row, bot_col = find_best_move(board)
    if bot_row != -1:
        board[bot_row][bot_col] = "O"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –±–æ—Ç–∞
        if check_win(board, "O"):
            keyboard = create_tic_tac_toe_keyboard(board)
            await callback.message.edit_text(
                "üòé <b>–Ø –≤—ã–∏–≥—Ä–∞–ª! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!</b>",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            del tic_tac_toe_games[user_id]
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–∏ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –±–æ—Ç–∞
        if is_board_full(board):
            keyboard = create_tic_tac_toe_keyboard(board)
            await callback.message.edit_text(
                "ü§ù <b>–ù–∏—á—å—è! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            del tic_tac_toe_games[user_id]
            await callback.answer()
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    game['player_turn'] = True
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_tic_tac_toe_keyboard(board)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

def create_tic_tac_toe_keyboard(board):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤"""
    keyboard = []
    for i in range(3):
        row = []
        for j in range(3):
            if board[i][j] == "X":
                text = "‚ùå"
            elif board[i][j] == "O":
                text = "‚≠ï"
            else:
                text = "‚¨úÔ∏è"
            row.append(types.InlineKeyboardButton(text=text, callback_data=f"ttt_{i}_{j}"))
        keyboard.append(row)
    
    keyboard.append([types.InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="ttt_exit")])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def check_win(board, player):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫
    for i in range(3):
        if all(board[i][j] == player for j in range(3)):
            return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for j in range(3):
        if all(board[i][j] == player for i in range(3)):
            return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2-i] == player for i in range(3)):
        return True
    
    return False

def find_best_move(board):
    """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Ö–æ–¥—ã
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                if check_win(board, "O"):
                    return i, j
                board[i][j] = " "
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Ö–æ–¥—ã –∏–≥—Ä–æ–∫–∞
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "X"
                if check_win(board, "X"):
                    return i, j
                board[i][j] = " "
    
    # –¶–µ–Ω—Ç—Ä
    if board[1][1] == " ":
        return 1, 1
    
    # –£–≥–ª—ã
    corners = [(0,0), (0,2), (2,0), (2,2)]
    random.shuffle(corners)
    for i, j in corners:
        if board[i][j] == " ":
            return i, j
    
    # –°–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
    empty_cells = [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]
    return random.choice(empty_cells) if empty_cells else (-1, -1)

def is_board_full(board):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ—Å–∫–∏"""
    return all(board[i][j] != " " for i in range(3) for j in range(3))


# ==================== –í–ò–°–ï–õ–ò–¶–ê (–° –ü–û–î–°–ö–ê–ó–ö–ê–ú–ò) ====================
hangman_games = {}
hangman_words = {
    "–ü–ò–¢–û–ù": "üêç –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
    "–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï": "üíª –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º", 
    "–¢–ï–õ–ï–ì–†–ê–ú": "üì± –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä",
    "–ë–û–¢": "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "–ö–û–ú–ü–¨–Æ–¢–ï–†": "üñ•Ô∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    "–ê–õ–ì–û–†–ò–¢–ú": "üìä –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π",
    "–ü–†–û–ì–†–ê–ú–ú–ê": "‚öôÔ∏è –ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
    "–§–£–ù–ö–¶–ò–Ø": "üîß –ë–ª–æ–∫ –∫–æ–¥–∞",
    "–ü–ï–†–ï–ú–ï–ù–ù–ê–Ø": "üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö"
}

@router.message(StateFilter(UserStates.game_mode), F.text == "üé≠ –í–∏—Å–µ–ª–∏—Ü–∞")
async def start_hangman(message: types.Message):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã '–í–∏—Å–µ–ª–∏—Ü–∞'"""
    user_id = message.from_user.id
    word, hint = random.choice(list(hangman_words.items()))
    hidden_word = ["_" for _ in word]
    attempts = 6
    
    hangman_games[user_id] = {
        'word': word,
        'hint': hint,
        'hidden_word': hidden_word,
        'attempts': attempts,
        'used_letters': set()
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—É–∫–≤–∞–º–∏
    keyboard = []
    row = []
    letters = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    
    for letter in letters:
        row.append(types.InlineKeyboardButton(text=letter, callback_data=f"hangman_{letter}"))
        if len(row) == 6:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([types.InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="hangman_exit")])
    
    hangman_figure = get_hangman_figure(attempts)
    
    text = f"üé≠ <b>–í–∏—Å–µ–ª–∏—Ü–∞!</b>\n\n{hangman_figure}\n\n"
    text += f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {hint}\n\n"
    text += f"–°–ª–æ–≤–æ: {' '.join(hidden_word)}\n"
    text += f"–ë—É–∫–≤ –≤ —Å–ª–æ–≤–µ: {len(word)}\n"
    text += f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}\n\n"
    text += "–í—ã–±–µ—Ä–∏ –±—É–∫–≤—É:"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode='HTML')

def get_hangman_figure(attempts):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–≥—É—Ä—É –≤–∏—Å–µ–ª–∏—Ü—ã"""
    figures = [
        """
        ‚îå‚îÄ‚îÄ‚îÄ
        ‚îÇ  üôÇ
        ‚îÇ /|\\
        ‚îÇ / \\
        ‚îÇ
        """,
        """
        ‚îå‚îÄ‚îÄ‚îÄ
        ‚îÇ  üòê
        ‚îÇ /|\\
        ‚îÇ / 
        ‚îÇ
        """,
        """
        ‚îå‚îÄ‚îÄ‚îÄ
        ‚îÇ  üòê
        ‚îÇ /|
        ‚îÇ / 
        ‚îÇ
        """,
        """
        ‚îå‚îÄ‚îÄ‚îÄ
        ‚îÇ  üòê
        ‚îÇ  |
        ‚îÇ / 
        ‚îÇ
        """,
        """
        ‚îå‚îÄ‚îÄ‚îÄ
        ‚îÇ  üòê
        ‚îÇ  |
        ‚îÇ  
        ‚îÇ
        """,
        """
        ‚îå‚îÄ‚îÄ‚îÄ
        ‚îÇ  üòü
        ‚îÇ  
        ‚îÇ  
        ‚îÇ
        """,
        """
        ‚îå‚îÄ‚îÄ‚îÄ
        ‚îÇ  
        ‚îÇ  
        ‚îÇ  
        ‚îÇ
        """
    ]
    return figures[6 - attempts]

@router.callback_query(F.data.startswith("hangman_"))
async def process_hangman_letter(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã –≤ –≤–∏—Å–µ–ª–∏—Ü–µ"""
    user_id = callback.from_user.id
    
    if callback.data == "hangman_exit":
        if user_id in hangman_games:
            del hangman_games[user_id]
        await callback.message.edit_text("üö™ –í—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã '–í–∏—Å–µ–ª–∏—Ü–∞'")
        await callback.answer()
        return
    
    if user_id not in hangman_games:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
        return
    
    letter = callback.data.replace("hangman_", "")
    game = hangman_games[user_id]
    word = game['word']
    hint = game['hint']
    hidden_word = game['hidden_word']
    attempts = game['attempts']
    used_letters = game['used_letters']
    
    if letter in used_letters:
        await callback.answer("–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
        return
    
    used_letters.add(letter)
    
    if letter in word:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —É–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã
        for i, char in enumerate(word):
            if char == letter:
                hidden_word[i] = letter
        message_text = f"‚úÖ –ë—É–∫–≤–∞ '{letter}' –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ!"
    else:
        attempts -= 1
        game['attempts'] = attempts
        message_text = f"‚ùå –ë—É–∫–≤—ã '{letter}' –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if "_" not in hidden_word:
        await callback.message.edit_text(
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: {word}</b>\n\n"
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—ã–ª–∞: {hint}",
            parse_mode='HTML'
        )
        del hangman_games[user_id]
        await callback.answer()
        return
    
    if attempts <= 0:
        await callback.message.edit_text(
            f"üíÄ <b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {word}</b>\n\n"
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—ã–ª–∞: {hint}\n\n"
            f"{get_hangman_figure(0)}",
            parse_mode='HTML'
        )
        del hangman_games[user_id]
        await callback.answer()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    row = []
    letters = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    
    for l in letters:
        if l in used_letters:
            if l in word:
                text = f"‚úÖ{l}"
            else:
                text = f"‚ùå{l}"
            row.append(types.InlineKeyboardButton(text=text, callback_data="hangman_used"))
        else:
            row.append(types.InlineKeyboardButton(text=l, callback_data=f"hangman_{l}"))
        
        if len(row) == 6:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([types.InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data="hangman_exit")])
    
    hangman_figure = get_hangman_figure(attempts)
    
    text = f"üé≠ <b>–í–∏—Å–µ–ª–∏—Ü–∞!</b>\n\n{hangman_figure}\n\n"
    text += f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {hint}\n\n"
    text += f"–°–ª–æ–≤–æ: {' '.join(hidden_word)}\n"
    text += f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}\n"
    text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {', '.join(sorted(used_letters))}\n\n"
    text += f"{message_text}\n\n"
    text += "–í—ã–±–µ—Ä–∏ –±—É–∫–≤—É:"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode='HTML')
    await callback.answer()