from aiogram import Router, types
from aiogram.filters import Command
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model

User = get_user_model()
router = Router()

@router.message(Command("tasks"))
async def show_tasks(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å async"""
    telegram_username = message.from_user.username
    
    try:
        user = await sync_to_async(User.objects.get)(telegram_username=telegram_username)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from tasks.models import Task
        tasks = await sync_to_async(list)(Task.objects.filter(assigned_to=user, status__in=['pending', 'in_progress']))
        
        if not tasks:
            await message.answer("‚úÖ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
            return
        
        response = "üìã <b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        for task in tasks:
            status_icon = "‚è≥" if task.status == 'pending' else "üîÑ"
            overdue = " üö®" if task.is_overdue else ""
            
            response += f"{status_icon}{overdue} <b>{task.title}</b>\n"
            response += f"üìÖ –î–æ: {task.due_date.strftime('%d.%m.%Y %H:%M')}\n"
            if task.description:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                desc = task.description[:100] + "..." if len(task.description) > 100 else task.description
                response += f"üìù {desc}\n"
            response += "\n"
        
        await message.answer(response, parse_mode='HTML')
        
    except User.DoesNotExist:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start"
        )