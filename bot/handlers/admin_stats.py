from aiogram import Router, types, F
from aiogram.filters import Command
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from tasks.models import Task

User = get_user_model()
router = Router()

@router.message(Command("stats"))
async def admin_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    telegram_username = message.from_user.username
    
    try:
        user = await sync_to_async(User.objects.get)(telegram_username=telegram_username)
        
        if not user.is_staff:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
            
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = await sync_to_async(User.objects.count)()
        total_tasks = await sync_to_async(Task.objects.count)()
        completed_tasks = await sync_to_async(Task.objects.filter(status='completed').count)()
        pending_tasks = await sync_to_async(Task.objects.filter(status='pending').count)()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        recent_completed = await sync_to_async(list)(
            Task.objects.filter(status='completed').order_by('-created_at')[:5]
        )
        
        stats_text = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ—Ç: {pending_tasks}\n\n"
            "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n"
        )
        
        for task in recent_completed:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
            username = await sync_to_async(lambda: task.assigned_to.username)()
            stats_text += f"‚úÖ {task.title} - {username}\n"
            
        await message.answer(stats_text, parse_mode='HTML')
        
    except User.DoesNotExist:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")